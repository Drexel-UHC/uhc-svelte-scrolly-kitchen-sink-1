{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "BarChart.svelte",
    "ColumnChart.svelte",
    "LineChart.svelte",
    "ScatterChart.svelte",
    "AxisX.svelte",
    "AxisY.svelte",
    "Footer.svelte",
    "Labels.svelte",
    "Legend.svelte",
    "Line.svelte",
    "Title.svelte",
    "Voronoi.svelte",
    "Map.svelte",
    "MapTooltip.svelte",
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "App.svelte",
    "Divider.svelte",
    "Filler.svelte",
    "Header.svelte",
    "Media.svelte",
    "ONSFooter.svelte",
    "ONSHeader.svelte",
    "Scroller.svelte",
    "Arrow.svelte",
    "Em.svelte",
    "Toggle.svelte"
  ],
  "sourcesContent": [
    "<svelte:options accessors={true} />\n\n<script>\n\timport { LayerCake, Svg } from 'layercake';\n\timport { scaleBand, scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\n  import { tweened } from 'svelte/motion';\n\timport { cubicInOut } from 'svelte/easing';\n\timport { groupData, stackData } from '../js/utils';\n\n\timport SetCoords from './shared/SetCoords.svelte';\n\timport Bar from './shared/Bar.svelte';\n\timport AxisX from './shared/AxisX.svelte';\n\timport AxisY from './shared/AxisY.svelte';\n\timport Legend from './shared/Legend.svelte';\n\timport Title from './shared/Title.svelte';\n\timport Footer from './shared/Footer.svelte';\n\n  export let data;\n\texport let height = 250; // number of pixels or valid css height string\n  export let animation = true;\n  export let duration = 800;\n\texport let xKey = 'x';\n\texport let yKey = 'y';\n\texport let zKey = null;\n\texport let idKey = yKey;\n\texport let xScale = 'linear';\n\texport let xFormatTick = d => d;\n\texport let xMax = null;\n\texport let xMin = 0;\n  export let xAxis = true;\n  export let yAxis = true;\n\texport let xTicks = 4;\n\texport let textColor = '#666';\n\texport let tickColor = '#ccc';\n\texport let tickDashed = false;\n\texport let title = null;\n\texport let footer = null;\n\texport let legend = false;\n\texport let snapTicks = false;\n\texport let mode = 'default'; // options: 'default', 'comparison', 'marker', 'stacked', 'grouped'\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\n\texport let color = null;\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\n\texport let markerWidth = 2.5;\n\texport let spacing = 0.05; // proportion of bar width (1 = 100%)\n\texport let interactive = true;\n\texport let xPrefix = \"\";\n\texport let xSuffix = \"\";\n\texport let yPrefix = \"\";\n\texport let ySuffix = \"\";\n\texport let hover = false;\n\texport let hovered = null;\n\texport let colorHover = 'orange';\n\texport let select = false;\n\texport let selected = null;\n\texport let colorSelect = 'black';\n\texport let highlighted = [];\n\texport let colorHighlight = 'black';\n\texport let overlayFill = false;\n\n\tconst tweenOptions = {\n\t\tduration: duration,\n\t\teasing: cubicInOut\n\t};\n\tconst coords = tweened(undefined, tweenOptions);\n\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\n\n\tfunction getTotals(data, keys) {\n\t\tlet arr = [];\n\t\tkeys.forEach(key => {\n\t\t\tlet vals = data.filter(d => d[yKey] == key).map(d => d[xKey]);\n\t\t\tlet sum = vals.reduce((a, b) => a + b, 0);\n\t\t\tarr.push(sum);\n\t\t});\n\t\treturn arr;\n\t}\n\n\t// Functions to update xDomain\n\tconst xDomSet = (data, mode, xKey, xMax) => xMax ? [xMin, xMax] : mode == 'stacked' && zKey ? [xMin, Math.max(...getTotals(data, data.map(d => d[yKey]).filter(distinct)))] : [xMin, Math.max(...data.map(d => d[xKey]))];\n\tfunction xDomUpdate(data, mode, xKey, xMax) {\n\t\tlet newXDom = xDomSet(data, mode, xKey, xMax);\n\t\tif (newXDom[0] != xDom[0] || newXDom[1] != xDom[1]) {\n\t\t\txDomain.set(newXDom, {duration: animation ? duration : 0});\n\t\t\txDom = newXDom;\n\t\t}\n\t}\n\tlet xDom = xDomSet(data, mode, xKey, xMax);\n\tconst xDomain = tweened(xDom, tweenOptions);\n\t$: xDomUpdate(data, mode, xKey, xMax);\n\n\t// Functions to update yDomain & zDomain\n\t$: yDomain = data.map(d => d[yKey]).filter(distinct);\n\t$: zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null;\n\n\t// Create a data series for each zKey (group)\n\t$: groupedData = mode == 'stacked' ? stackData(data, zDomain, xKey, zKey) : groupData(data, zDomain, zKey);\n</script>\n\n{#if title}\n  <Title>{title}</Title>\n{/if}\n<slot name=\"options\"/>\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\">\n\t<LayerCake\n\t\t{padding}\n\t\tx={xKey}\n\t\ty={yKey}\n\t\tz={zKey}\n\t\txDomain={$xDomain}\n\t\t{yDomain}\n\t\txScale={xScale == 'log' ? scaleSymlog() : scaleLinear()}\n\t\tyScale={scaleBand().paddingInner([spacing]).round(true)}\n\t\tzScale={scaleOrdinal()}\n\t\t{zDomain}\n\t\tzRange={colors}\n\t\tdata={groupedData}\n\t\tflatData={data}\n\t\tcustom={{\n\t\t\ttype: 'bar',\n\t\t\tmode,\n\t\t\tidKey,\n      coords,\n\t\t\tmarkerWidth,\n\t\t\tcolorSelect,\n\t\t\tcolorHover,\n\t\t\tcolorHighlight,\n      animation,\n      duration\n    }}\n\t\tlet:width\n\t>\n\t  {#if width > 80} <!-- Hack to prevent rendering before xRange/yRange initialised -->\n\t  <SetCoords/>\n\t  <slot name=\"back\"/>\n\t\t<Svg pointerEvents={interactive}>\n      {#if xAxis}\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix} {textColor} {tickColor} {tickDashed}/>\n      {/if}\n      {#if yAxis}\n\t\t\t  <AxisY gridlines={false} prefix={yPrefix} suffix={ySuffix} {textColor} {tickColor} {tickDashed}/>\n      {/if}\n\t\t\t<Bar {select} {selected} {hover} {hovered} {highlighted} on:hover on:select {overlayFill}/>\n\t\t\t<slot name=\"svg\"/>\n\t\t</Svg>\n\t  <slot name=\"front\"/>\n\t\t{/if}\n\t</LayerCake>\n</div>\n{#if legend && zDomain}\n  <Legend domain={zDomain} {colors} {markerWidth} horizontal={false} line={mode == 'barcode'} comparison={mode == 'comparison'}/>\n{/if}\n{#if footer}\n  <Footer>{footer}</Footer>\n{/if}\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t}\n</style>",
    "<svelte:options accessors={true} />\n\n<script>\n\timport { LayerCake, Svg } from 'layercake';\n\timport { scaleBand, scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\n  import { tweened } from 'svelte/motion';\n\timport { cubicInOut } from 'svelte/easing';\n\timport { groupData, stackData } from '../js/utils';\n\n\timport SetCoords from './shared/SetCoords.svelte';\n\timport Column from './shared/Column.svelte';\n\timport AxisX from './shared/AxisX.svelte';\n\timport AxisY from './shared/AxisY.svelte';\n\timport Legend from './shared/Legend.svelte';\n\timport Title from './shared/Title.svelte';\n\timport Footer from './shared/Footer.svelte';\n\n  export let data;\n\texport let height = 250; // number of pixels or valid css height string\n  export let animation = true;\n  export let duration = 800;\n\texport let xKey = 'x';\n\texport let yKey = 'y';\n\texport let zKey = null;\n\texport let idKey = xKey;\n\texport let yScale = 'linear';\n\texport let yFormatTick = d => d;\n\texport let yMax = null;\n\texport let yMin = 0;\n  export let xAxis = true;\n  export let yAxis = true;\n\texport let yTicks = 4;\n\texport let title = null;\n\texport let footer = null;\n\texport let legend = false;\n\texport let mode = 'default'; // options: 'default', 'comparison', 'marker', 'stacked', 'grouped'\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\n\texport let color = null;\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\n\texport let markerWidth = 2.5\n\texport let spacing = 0.05 // proportion of bar width (1 = 100%)\n\texport let interactive = true;\n\texport let xPrefix = \"\";\n\texport let xSuffix = \"\";\n\texport let yPrefix = \"\";\n\texport let ySuffix = \"\";\n\texport let hover = false;\n\texport let hovered = null;\n\texport let colorHover = 'orange';\n\texport let select = false;\n\texport let selected = null;\n\texport let colorSelect = 'black';\n\texport let highlighted = [];\n\texport let colorHighlight = 'black';\n\texport let overlayFill = false;\n\n\tconst tweenOptions = {\n\t\tduration: duration,\n\t\teasing: cubicInOut\n\t};\n\tconst coords = tweened(undefined, tweenOptions);\n\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\n\n\tfunction getTotals(data, keys) {\n\t\tlet arr = [];\n\t\tkeys.forEach(key => {\n\t\t\tlet vals = data.filter(d => d[xKey] == key).map(d => d[yKey]);\n\t\t\tlet sum = vals.reduce((a, b) => a + b, 0);\n\t\t\tarr.push(sum);\n\t\t});\n\t\treturn arr;\n\t}\n\n\t// Functions to animate yDomain\n\tconst yDomSet = (data, mode, yKey, yMax) => yMax ? [yMin, yMax] : mode == 'stacked' && yKey ? [yMin, Math.max(...getTotals(data, data.map(d => d[xKey]).filter(distinct)))] : [yMin, Math.max(...data.map(d => d[yKey]))];\n\tfunction yDomUpdate(data, mode, yKey, yMax) {\n\t\tlet newYDom = yDomSet(data, mode, yKey, yMax);\n\t\tif (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {\n\t\t\tyDomain.set(newYDom, {duration: animation ? duration : 0});\n\t\t\tyDom = newYDom;\n\t\t}\n\t}\n\tlet yDom = yDomSet(data, mode, yKey, yMax);\n\tconst yDomain = tweened(yDom, tweenOptions);\n\t$: yDomUpdate(data, mode, yKey, yMax);\n\n\t// Functions to update xDomain & zDomain\n\t$: xDomain = data.map(d => d[xKey]).filter(distinct);\n\t$: zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null;\n\n\t// Create a data series for each zKey (group)\n\t$: groupedData = mode == 'stacked' ? stackData(data, zDomain, yKey, zKey) : groupData(data, zDomain, zKey);\n</script>\n\n{#if title}\n  <Title>{title}</Title>\n{/if}\n<slot name=\"options\"/>\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\">\n\t<LayerCake\n\t\t{padding}\n\t\tx={xKey}\n\t\ty={yKey}\n\t\tz={zKey}\n\t\t{xDomain}\n\t\tyDomain={$yDomain}\n\t\t{zDomain}\n\t\txScale={scaleBand().paddingInner([spacing]).round(true)}\n\t\tyScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}\n\t\tzScale={scaleOrdinal()}\n\t\tzRange={colors}\n\t\tdata={groupedData}\n\t\tflatData={data}\n\t\tcustom={{\n\t\t\ttype: 'column',\n\t\t\tmode,\n\t\t\tidKey,\n      coords,\n\t\t\tmarkerWidth,\n\t\t\tcolorSelect,\n\t\t\tcolorHover,\n\t\t\tcolorHighlight,\n      animation,\n      duration\n    }}\n\t\tlet:width\n\t>\n\t  {#if width > 80} <!-- Hack to prevent rendering before xRange/yRange initialised -->\n\t\t<SetCoords/>\n\t  <slot name=\"back\"/>\n\t\t<Svg pointerEvents={interactive}>\n      {#if xAxis}\n\t\t\t  <AxisX gridlines={false} prefix={xPrefix} suffix={xSuffix}/>\n      {/if}\n      {#if yAxis}\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix}/>\n      {/if}\n\t\t\t<Column {select} {selected} {hover} {hovered} {highlighted} on:hover on:select {overlayFill}/>\n\t\t\t<slot name=\"svg\"/>\n\t\t</Svg>\n\t  <slot name=\"front\"/>\n\t\t{/if}\n\t</LayerCake>\n</div>\n{#if legend && zDomain}\n  <Legend domain={zDomain} {colors} {markerWidth} line={mode == 'barcode'} comparison={mode == 'comparison'}/>\n{/if}\n{#if footer}\n  <Footer>{footer}</Footer>\n{/if}\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t}\n</style>",
    "<svelte:options accessors={true} />\n\n<script>\n\timport { LayerCake, Svg } from 'layercake';\n\timport { scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\n  import { tweened } from 'svelte/motion';\n\timport { cubicInOut } from 'svelte/easing';\n\timport { groupData, stackData } from '../js/utils';\n\n\timport SetCoords from './shared/SetCoords.svelte';\n\timport Line from './shared/Line.svelte';\n\timport Area from './shared/Area.svelte';\n\timport AxisX from './shared/AxisX.svelte';\n\timport AxisY from './shared/AxisY.svelte';\n\timport Legend from './shared/Legend.svelte';\n\timport Title from './shared/Title.svelte';\n\timport Footer from './shared/Footer.svelte';\n\timport Labels from './shared/Labels.svelte';\n\n  export let data;\n\texport let height = 250; // number of pixels or valid css height string\n  export let animation = true;\n  export let duration = 800;\n\texport let xKey = 'x';\n\texport let yKey = 'y';\n\texport let zKey = null;\n\texport let idKey = zKey;\n\texport let labelKey = idKey;\n\texport let yScale = 'linear';\n\texport let yFormatTick = d => d;\n\texport let yMax = null;\n\texport let yMin = 0;\n  export let xAxis = true;\n  export let yAxis = true;\n\texport let xTicks = 4;\n\texport let yTicks = 4;\n\texport let title = null;\n\texport let footer = null;\n\texport let legend = false;\n\texport let labels = false;\n\texport let snapTicks = true;\n  export let line = true;\n  export let area = true;\n\texport let mode = 'default';\n\texport let areaOpacity = 1;\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\n\texport let color = null;\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\n\texport let lineWidth = 2.5;\n\texport let interactive = true;\n\texport let xPrefix = \"\";\n\texport let xSuffix = \"\";\n\texport let yPrefix = \"\";\n\texport let ySuffix = \"\";\n\texport let hover = false;\n\texport let hovered = null;\n\texport let colorHover = 'orange';\n\texport let select = false;\n\texport let selected = null;\n\texport let colorSelect = '#206095';\n\texport let highlighted = [];\n\texport let colorHighlight = '#206095';\n\n\tconst tweenOptions = {\n\t\tduration: duration,\n\t\teasing: cubicInOut\n\t};\n\tconst coords = tweened(undefined, tweenOptions);\n\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\n\n\tfunction getTotals(data, keys) {\n\t\tlet arr = [];\n\t\tkeys.forEach(key => {\n\t\t\tlet vals = data.filter(d => d[xKey] == key).map(d => d[yKey]);\n\t\t\tlet sum = vals.reduce((acc, curr) => acc + curr);\n\t\t\tarr.push(sum);\n\t\t});\n\t\treturn arr;\n\t}\n\n\t// Functions to animate yDomain\n\tconst yDomSet = (data, mode, yKey, yMax) => yMax ? [yMin, yMax] : mode == 'stacked' && yKey ? [yMin, Math.max(...getTotals(data, data.map(d => d[xKey]).filter(distinct)))] : [yMin, Math.max(...data.map(d => d[yKey]))];\n\tfunction yDomUpdate(data, mode, yKey, yMax) {\n\t\tlet newYDom = yDomSet(data, mode, yKey, yMax);\n\t\tif (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {\n\t\t\tyDomain.set(newYDom, {duration: animation ? duration : 0});\n\t\t\tyDom = newYDom;\n\t\t}\n\t}\n\tlet yDom = yDomSet(data, mode, yKey, yMax);\n\tconst yDomain = tweened(yDom, tweenOptions);\n\t$: yDomUpdate(data, mode, yKey, yMax);\n\t\n\t// Function to update zDomain\n\t$: zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null;\n\n\t// Create a data series for each zKey (group)\n\t$: groupedData = mode == 'stacked' ? stackData(data, zDomain, yKey, zKey) : groupData(data, zDomain, zKey);\n</script>\n\n{#if title}\n  <Title>{title}</Title>\n{/if}\n<slot name=\"options\"/>\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\">\n\t<LayerCake\n\t\t{padding}\n\t\tx={xKey}\n\t\ty={yKey}\n\t\tz={zKey}\n\t\tyDomain={$yDomain}\n\t\tyScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}\n\t\tzScale={scaleOrdinal()}\n\t\t{zDomain}\n\t\tzRange={colors}\n\t\tdata={groupedData}\n\t\tflatData={data}\n\t\tcustom={{\n\t\t\ttype: 'line',\n\t\t\tmode,\n\t\t\tidKey,\n\t\t\tlabelKey,\n\t\t\tcoords,\n\t\t\tcolorSelect,\n\t\t\tcolorHover,\n\t\t\tcolorHighlight,\n      animation,\n      duration\n    }}\n\t\tlet:width\n\t>\n\t  {#if width > 80} <!-- Hack to prevent rendering before xRange/yRange initialised -->\n\t\t<SetCoords/>\n\t  <slot name=\"back\"/>\n\t\t<Svg pointerEvents={interactive}>\n      {#if xAxis}\n\t\t\t  <AxisX ticks={xTicks} {snapTicks} prefix={xPrefix} suffix={xSuffix}/>\n      {/if}\n      {#if yAxis}\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix}/>\n      {/if}\n      {#if area}\n\t\t\t  <Area {mode} opacity={areaOpacity}/>\n      {/if}\n      {#if line}\n\t\t\t  <Line {lineWidth} {select} bind:selected {hover} bind:hovered {highlighted} on:hover on:select/>\n      {/if}\n\t\t\t{#if labels}\n\t\t\t\t<Labels {hovered} {selected}/>\n\t\t\t{/if}\n\t\t\t<slot name=\"svg\"/>\n\t\t</Svg>\n\t  <slot name=\"front\"/>\n\t\t{/if}\n\t</LayerCake>\n</div>\n{#if legend && zDomain}\n  <Legend domain={zDomain} {colors} {line} markerWidth={lineWidth}/>\n{/if}\n{#if footer}\n  <Footer>{footer}</Footer>\n{/if}\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t}\n</style>",
    "<svelte:options accessors={true} />\n\n<script>\t\n\timport { LayerCake, Svg } from 'layercake';\n\timport { scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\n  import { tweened } from 'svelte/motion';\n\timport { cubicInOut } from 'svelte/easing';\n\n\timport SetCoords from './shared/SetCoords.svelte';\n\timport Scatter from './shared/Scatter.svg.svelte';\n\timport Voronoi from './shared/Voronoi.svelte';\n\timport AxisX from './shared/AxisX.svelte';\n\timport AxisY from './shared/AxisY.svelte';\n\timport Legend from './shared/Legend.svelte';\n\timport Title from './shared/Title.svelte';\n\timport Footer from './shared/Footer.svelte';\n\timport Labels from './shared/Labels.svelte';\n\n\texport let data;\n\texport let height = 250; // number of pixels or valid css height string\n  export let animation = true;\n  export let duration = 800;\n\texport let xKey = 'x';\n\texport let yKey = null;\n\texport let zKey = null;\n  export let rKey = null;\n\texport let idKey = xKey;\n\texport let labelKey = idKey;\n\texport let xScale = 'linear';\n\texport let yScale = 'linear';\n\texport let xFormatTick = d => d;\n\texport let yFormatTick = d => d;\n\texport let xMax = null;\n\texport let xMin = null;\n\texport let yMax = null;\n\texport let yMin = null;\n  export let xAxis = true;\n  export let yAxis = true;\n\texport let xTicks = 4;\n  export let yTicks = 4;\n\texport let textColor = '#666';\n\texport let tickColor = '#ccc';\n\texport let tickDashed = false;\n\texport let title = null;\n\texport let footer = null;\n\texport let legend = false;\n\texport let labels = false;\n\texport let snapTicks = false;\n  export let padding = { top: 0, bottom: 20, left: 35, right: 0 };\n  export let buffer = 5;\n\texport let color = null;\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\n\texport let r = 4;\n\texport let interactive = true;\n\texport let xPrefix = \"\";\n\texport let xSuffix = \"\";\n\texport let yPrefix = \"\";\n\texport let ySuffix = \"\";\n\texport let hover = false;\n\texport let hovered = null;\n\texport let colorHover = 'orange';\n\texport let select = false;\n\texport let selected = null;\n\texport let colorSelect = 'black';\n\texport let highlighted = [];\n\texport let colorHighlight = 'black';\n\texport let overlayFill = false;\n\n\tconst tweenOptions = {\n\t\tduration: duration,\n\t\teasing: cubicInOut\n\t};\n\tconst coords = tweened(undefined, tweenOptions);\n  \n  const distinct = (d, i, arr) => arr.indexOf(d) ==  i;\n\n\tfunction domGet(data, key, min, max) {\n\t\tlet vals = data.map(d => d[key]);\n\t\treturn [min ? min : vals[0] ? Math.min(...vals) : -1, max ? max : vals[0] ? Math.max(...vals) : 1];\n\t}\n\tfunction xDomUpdate(data, key, min, max) {\n\t\tlet newDom = domGet(data, key, min, max);\n\t\tif (newDom[0] != xDom[0] || newDom[1] != xDom[1]) {\n\t\t\txDomain.set(newDom);\n\t\t\txDom = newDom;\n\t\t}\n\t}\n\tfunction yDomUpdate(data, key, min, max) {\n\t\tlet newDom = key ? domGet(data, key, min, max) : yDom;\n\t\tif (newDom[0] != yDom[0] || newDom[1] != yDom[1]) {\n\t\t\tyDomain.set(newDom, {duration: animation ? duration : 0});\n\t\t\tyDom = newDom;\n\t\t}\n\t}\n\tlet xDom = domGet(data, xKey, xMin, xMax);\n\tconst xDomain = tweened(xDom, tweenOptions);\n\tlet yDom = domGet(data, yKey, yMin, yMax);\n\tconst yDomain = tweened(yDom, tweenOptions);\n\n\t$: xDomUpdate(data, xKey, xMin, xMax);\n\t$: yDomUpdate(data, yKey, yMin, yMax);\n  $: zDomain = zKey ? data.map(d => d[zKey]).filter(distinct) : null;\n</script>\n\n{#if title}\n  <Title>{title}</Title>\n{/if}\n<slot name=\"options\"/>\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\">\n\t<LayerCake\n    {padding}\n\t\tx={xKey}\n\t\ty={yKey}\n    z={zKey}\n    r={rKey}\n\t\txScale={xScale == 'log' ? scaleSymlog() : scaleLinear()}\n\t\tyScale={yScale == 'log' ? scaleSymlog() : scaleLinear()}\n    zScale={scaleOrdinal()}\n\t\txDomain={$xDomain}\n\t\tyDomain={$yDomain}\n\t\t{zDomain}\n\t\tzRange={colors}\n    rRange={Array.isArray(r) ? r : [r, r]}\n\t\tdata={data}\n    xPadding={[buffer, buffer]}\n    yPadding={yKey ? [buffer, buffer] : null}\n    custom={{\n\t\t\ttype: 'scatter',\n\t\t\tidKey,\n\t\t\tlabelKey,\n      coords,\n\t\t\tcolorSelect,\n\t\t\tcolorHover,\n\t\t\tcolorHighlight,\n\t\t\tpadding: 1,\n      animation,\n      duration\n    }}\n\t\tlet:width\n\t>\n\t  {#if width > 80} <!-- Hack to prevent rendering before xRange/yRange initialised -->\n\t\t<SetCoords/>\n    <slot name=\"back\"/>\n\t\t<Svg pointerEvents={interactive}>\n      {#if xAxis}\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix} {textColor} {tickColor} {tickDashed}/>\n      {/if}\n      {#if yAxis && yKey}\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix} {textColor} {tickColor} {tickDashed}/>\n      {/if}\n\t\t\t<Scatter {selected} {hovered} {highlighted} {overlayFill}/>\n\t\t\t{#if select || hover}\n\t\t\t\t<Voronoi {select} bind:selected {hover} bind:hovered {highlighted} on:hover on:select/>\n\t\t\t{/if}\n\t\t\t{#if labels}\n\t\t\t\t<Labels {hovered} {selected}/>\n\t\t\t{/if}\n\t\t\t<slot name=\"svg\"/>\n\t\t</Svg>\n\t  <slot name=\"front\"/>\n\t\t{/if}\n\t</LayerCake>\n</div>\n{#if legend && zDomain}\n  <Legend domain={zDomain} {colors} markerLength={Array.isArray(r) ? r[0] * 2 : r * 2} round={true}/>\n{/if}\n{#if footer}\n  <Footer>{footer}</Footer>\n{/if}\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t}\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let tickDashed = false;\n\texport let tickMarks = false;\n\texport let tickColor = '#bbb';\n\texport let textColor = '#666';\n\texport let formatTick = d => d;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\texport let prefix = '';\n\texport let suffix = '';\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\ttypeof ticks === 'function' ?\n\t\t\t\tticks($xScale.ticks()) :\n\t\t\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis' class:snapTicks>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{tick}' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line class=\"gridline\" class:dashed={tickDashed} y1='{$height * -1}' y2='0' x1='0' x2='0' style='stroke: {tickColor}'></line>\n\t\t\t{/if}\n\t\t\t{#if tickMarks === true}\n\t\t\t\t<line class=\"tick-mark\" y1='{0}' y2='{6}' x1='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' x2='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' style='stroke: {tickColor}'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'\n\t\t\t\tstyle='fill: {textColor}'>\n\t\t\t\t\t{i == tickVals.length - 1 ? prefix + formatTick(tick) + suffix : formatTick(tick)}\n\t\t\t\t</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .8em;\n\t}\n\n\t.tick .tick-mark,\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n\n\t.dashed {\n\t\tstroke-dasharray: 2;\n\t}\n\t/* This looks slightly better */\n\t.axis.snapTicks .tick:last-child text {\n\t\ttransform: translateX(3px);\n\t}\n\t.axis.snapTicks .tick.tick-0 text {\n\t\ttransform: translateX(-3px);\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding, xRange, yScale } = getContext('LayerCake');\n\n\texport let ticks = 4;\n\texport let tickMarks = false;\n\texport let gridlines = true;\n\texport let tickDashed = false;\n\texport let tickColor = '#bbb';\n\texport let textColor = '#666';\n\texport let formatTick = d => d;\n\texport let xTick = 0;\n\texport let yTick = 0;\n\texport let dxTick = 0;\n\texport let dyTick = -4;\n\texport let textAnchor = 'start';\n\texport let prefix = '';\n\texport let suffix = '';\n\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$yScale.domain() :\n\t\t\ttypeof ticks === 'function' ?\n\t\t\t\tticks($yScale.ticks()) :\n\t\t\t\t\t$yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line\n\t\t\t\t\tclass=\"gridline\"\n\t\t\t\t\tx2='100%'\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\tclass:dashed={tickDashed}\n\t\t\t\t\tstyle='stroke: {tickColor}'\n\t\t\t\t></line>\n\t\t\t{/if}\n\t\t\t{#if tickMarks === true}\n\t\t\t\t<line\n\t\t\t\t\tclass='tick-mark'\n\t\t\t\t\tx1='0'\n\t\t\t\t\tx2='{isBandwidth ? -6 : 6}'\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\tstyle='stroke: {tickColor}'\n\t\t\t\t></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx='{xTick}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n\t\t\t\tdx='{isBandwidth ? -4 : dxTick}'\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor}; fill: {textColor}\">\n\t\t\t\t\t{i == tickVals.length - 1 ? prefix + formatTick(tick) + suffix : formatTick(tick)}\n\t\t\t\t</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .8em;\n\t}\n\n\t.dashed {\n\t\tstroke-dasharray: 2;\n\t}\n\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n</style>\n",
    "<div class=\"footer\"><slot/></div>\n\n<style>\n\t.footer {\n\t\tfont-size: .8em;\n\t\tcolor: grey;\n\t\tmargin-top: 5px;\n\t}\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { data, xScale, yScale, custom } = getContext('LayerCake');\n\n\texport let hovered = null;\n\texport let selected = null;\n\t\n\tlet coords = $custom.coords;\n\tlet idKey = $custom.idKey;\n\tlet labelKey = $custom.labelKey;\n\t// let colorHover = $custom.colorHover ? $custom.colorHover : 'orange';\n\t// let colorSelect = $custom.colorSelect ? $custom.colorSelect : '#206095';\n</script>\n\n{#if $coords}\n<defs>\n\t<filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" id=\"bgfill\">\n\t\t<feFlood flood-color=\"rgba(255,255,255,0.8)\" result=\"bg\" />\n\t\t<feMerge>\n\t\t\t<feMergeNode in=\"bg\"/>\n\t\t\t<feMergeNode in=\"SourceGraphic\"/>\n\t\t</feMerge>\n\t</filter>\n</defs>\n<g class=\"label-group\">\n\t{#if $coords[0] && $coords[0].x}\n\t{#each $coords as d, i}\n\t\t{#if [hovered, selected].includes($data[i][idKey])}\n\t\t<text\n\t\t\tclass=\"label\"\n\t\t\ttransform=\"translate(5,-5)\"\n\t\t\tfilter=\"url(#bgfill)\"\n\t\t\tfill=\"#333\"\n\t\t  x={$xScale(d.x)}\n\t\t\ty={$yScale(d.y)}>\n\t\t\t{$data[i][labelKey]}\n\t\t</text>\n\t\t{/if}\n\t{/each}\n\t{:else if $coords[0] && $coords[0][0] && $coords[0][0].x}\n\t{#each $coords as d, i}\n\t\t{#if [hovered, selected].includes($data[i][0][idKey])}\n\t\t<text\n\t\t\tclass=\"label\"\n\t\t\ttransform=\"translate(2,3)\"\n\t\t\tfilter=\"url(#bgfill)\"\n\t\t\tfill=\"#333\"\n\t\t  x={$xScale(d[d.length - 1].x)}\n\t\t\ty={$yScale(d[d.length - 1].y)}>\n\t\t\t{$data[i][0][labelKey]}\n\t\t</text>\n\t\t{/if}\n\t{/each}\n\t{/if}\n</g>\n{/if}\n\n<style>\n\t.label {\n\t\tfont-size: 0.8em;\n\t}\n</style>",
    "<script>\n  export let domain = null;\n  export let colors = null;\n  export let line = false; // true if line chart\n  export let comparison = false; // true if chart uses bars + markers for comparison\n  export let horizontal = true; // true if marker lines should be horizontal, false if vertical\n  export let markerWidth = 2.5;\n  export let markerLength = 13;\n  export let round = false; // to represent round markers\n</script>\n\n{#if Array.isArray(domain) && Array.isArray(colors)}\n  <ul class=\"legend\">\n    {#each domain as label, i}\n      <li>\n        <div\n          class=\"bullet\"\n          class:round\n          style=\"background-color: {colors[i]}; width: {!horizontal && (line || (comparison && i != 0)) ? markerWidth : markerLength}px; height: {horizontal && (line || (comparison && i != 0)) ? markerWidth : markerLength}px\"\n        />\n        {label}\n      </li>\n    {/each}\n  </ul>\n{/if}\n\n<style>\n  ul.legend {\n    margin: 0;\n    padding: 0;\n  }\n  ul.legend li {\n    display: inline;\n    font-size: .8em;\n  }\n  ul.legend li + li {\n    margin-left: 8px;\n  }\n  .bullet {\n\t\tdisplay: inline-block;\n    vertical-align: middle;\n\t}\n  .round {\n    border-radius: 50%;\n  }\n</style>",
    "<script>\n\timport { getContext, createEventDispatcher } from 'svelte';\n\n\tconst { data, xScale, yScale, zGet, config, custom } = getContext('LayerCake');\n\tconst dispatch = createEventDispatcher();\n\n\texport let lineWidth = 2.5;\n\texport let hover = false;\n\texport let hovered = null;\n\texport let select = false;\n\texport let selected = null;\n\texport let highlighted = [];\n\t\n\tlet coords = $custom.coords;\n\tlet idKey = $custom.idKey;\n\tlet colorHover = $custom.colorHover ? $custom.colorHover : 'orange';\n\tlet colorSelect = $custom.colorSelect ? $custom.colorSelect : '#206095';\n\tlet colorHighlight = $custom.colorHighlight ? $custom.colorHighlight : '#206095';\n\n\t// Function to make SVG path\n\tconst makePath = (group) => {\n\t\tlet path = 'M' + group\n\t\t.map(d => {\n\t\t\treturn $xScale(d.x) + ',' + $yScale(d.y);\n\t\t})\n\t\t.join('L');\n\t\treturn path;\n\t}\n\n\tfunction doHover(e, d) {\n\t\tif (hover) {\n\t\t\thovered = d ? d[0][idKey] : null;\n\t\t\tdispatch('hover', {\n\t\t\t\tid: hovered,\n\t\t\t\tdata: d,\n\t\t\t\tevent: e\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction doSelect(e, d) {\n\t\tif (select) {\n\t\t\tselected = d ? d[0][idKey] : null;\n\t\t\tdispatch('select', {\n\t\t\t\tid: selected,\n\t\t\t\tdata: d,\n\t\t\t\tevent: e\n\t\t\t});\n\t\t}\n\t}\n</script>\n\n{#if $coords}\n<g class=\"line-group\">\n\t{#each $coords as group, i}\n\t\t<path\n\t\t  class=\"path-hover\"\n\t\t\td=\"{makePath(group)}\"\n\t\t\ton:mouseover={e => doHover(e, $data[i])}\n\t\t\ton:mouseleave={e => doHover(e, null)}\n\t\t\ton:focus={e => doHover(e, $data[i])}\n\t\t\ton:blur={e => doHover(e, null)}\n\t\t\ton:click={e => doSelect(e, $data[i])}\n\t\t/>\n\t  <path\n\t\t  class=\"path-line\"\n\t\t\td=\"{makePath(group)}\"\n\t\t\tstroke=\"{\n\t\t\t\t$config.z ? $zGet($data[i][0]) : $config.zRange[0]}\"\n\t\t\tstroke-width=\"{\n\t\t\t\tlineWidth\n\t\t\t}\"\n\t\t/>\n\t{/each}\n\t\n\t{#if idKey && (hover || selected || highlighted[0])}\n\t{#each $coords as group, i}\n\t\t{#if [hovered, selected, ...highlighted].includes($data[i][0][idKey]) }\n\t  <path\n\t\t  class=\"path-overlay\"\n\t\t\td=\"{makePath(group)}\"\n\t\t\tstroke=\"{\n\t\t\t\t$data[i][0][idKey] == hovered ? colorHover :\n\t\t\t\t$data[i][0][idKey] == selected ? colorSelect :\n\t\t\t\tcolorHighlight\n\t\t\t}\"\n\t\t\tstroke-width=\"{\n\t\t\t\tlineWidth + 1.5\n\t\t\t}\"\n\t\t/>\n\t\t{/if}\n\t{/each}\n\t{/if}\n</g>\n{/if}\n\n<style>\n\tpath {\n\t\tfill: none;\n\t\tstroke-linejoin: round;\n\t\tstroke-linecap: round;\n\t}\n\t.path-hover {\n\t\tstroke: rgba(255,255,255,0);\n\t\tstroke-width: 7;\n\t}\n\t.path-line, .path-overlay {\n\t\tpointer-events: none;\n\t}\n</style>\n\n\n",
    "<div class=\"title\"><slot/></div>\n\n<style>\n\t.title {\n\t\tfont-size: 1.1em;\n\t\tfont-weight: bold;\n\t\tmargin-bottom: 10px;\n\t}\n</style>",
    "<script>\n\timport { Delaunay } from 'd3-delaunay';\n\timport { getContext, createEventDispatcher } from 'svelte';\n\n\tconst { data, width, height, custom, xScale, yScale } = getContext('LayerCake');\n\tconst dispatch = createEventDispatcher();\n\n\texport let hover = false;\n\texport let hovered = null;\n\texport let select = false;\n\texport let selected = null;\n\n\tlet coords = $custom.coords;\n\tlet idKey = $custom.idKey;\n\n\tfunction doHover(e, d) {\n\t\tif (hover) {\n\t\t\thovered = d ? d[idKey] : null;\n\t\t\tdispatch('hover', {\n\t\t\t\tid: hovered,\n\t\t\t\tdata: d,\n\t\t\t\tevent: e\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction doSelect(e, d) {\n\t\tif (select) {\n\t\t\tselected = d ? d[idKey] : null;\n\t\t\tdispatch('select', {\n\t\t\t\tid: selected,\n\t\t\t\tdata: d,\n\t\t\t\tevent: e\n\t\t\t});\n\t\t}\n\t}\n\n\t$: coordsArray = Array.isArray($coords) ? $coords.map(d => [$xScale(d.x), $yScale(d.y)]) : [];\n\t$: voronoi = Delaunay.from(coordsArray).voronoi([0, 0, $width, $height]);\n\n</script>\n\n<style>\n\t.voronoi-cell {\n\t\tfill: none;\n\t\tstroke: none;\n\t\tpointer-events: all;\n\t}\n</style>\n\n{#if voronoi}\n<g class=\"voronoi-group\">\n{#each $data as d, i}\n\t<path\n\t\tclass=\"voronoi-cell\"\n\t\td={voronoi.renderCell(i)}\n\t\ton:mouseover={e => doHover(e, $data[i])}\n\t\ton:mouseleave={e => doHover(e, null)}\n\t\ton:focus={e => doHover(e, $data[i])}\n\t\ton:blur={e => doHover(e, null)}\n\t\ton:click={e => doSelect(e, $data[i])}\n\t/>\n{/each}\n</g>\n{/if}\n",
    "<script>\n\timport { onMount, setContext } from \"svelte\";\n\timport mapbox from \"./lib/mapbox-gl@1.13.2\";\n\t// Mapbox source code is bundled due to versioning & ES6 import issues\n\t// https://cdn.skypack.dev/-/mapbox-gl@v1.13.2-asizChmwkQobquJNQjgb/dist=es2020,mode=imports,min/optimized/mapbox-gl.js\n\n\texport let map;\n\texport let id = \"map\";\n\texport let location = {\n\t\tlng: 15,\n\t\tlat: 45,\n\t\tzoom: 1\n\t};\n\texport let style = {\n\t\t\"version\": 8,\n\t\t\"sources\": {},\n\t\t\"layers\": []\n\t};\n\texport let minzoom = 0;\n\texport let maxzoom = 14;\n\texport let controls = false;\n\texport let locate = false;\n\texport let tabbable = false;\n\n\texport let zoom = null;\n\texport let center = null;\n\texport let interactive = true;\n\n\tlet container;\n\tlet w;\n\tlet h;\n\tlet options;\n\tlet loaded = false;\n\n\tsetContext(\"map\", {\n\t\tgetMap: () => map,\n\t});\n\t\n\t// Interpret location\n\tif (location.bounds) {\n\t\toptions = { bounds: location.bounds };\n\t} else if (typeof location.lng == 'number' && typeof location.lat == 'number') {\n\t\toptions = {\n\t\t\tcenter: [location.lng, location.lat],\n\t\t};\n\t\tif (typeof location.zoom == 'number') {\n\t\t\toptions.zoom = location.zoom;\n\t\t}\n\t}\n\n\tonMount(() => {\n\t\tconst link = document.createElement(\"link\");\n\t\tlink.rel = \"stylesheet\";\n\t\tlink.href = \"https://unpkg.com/mapbox-gl@1.13.2/dist/mapbox-gl.css\";\n\n\t\tlink.onload = () => {\n\t\t\tmap = new mapbox.Map({\n\t\t\t\tcontainer,\n\t\t\t\tstyle,\n\t\t\t\tminZoom: minzoom,\n\t\t\t\tmaxZoom: maxzoom,\n\t\t\t\tinteractive,\n\t\t\t\t...options,\n\t\t\t});\n\t\t\t\n\t\t\tif (controls) {\n\t\t\t\tmap.addControl(new mapbox.NavigationControl({showCompass: false}));\n\t\t\t}\n\t\t\t\n\t\t\tif (locate) {\n\t\t\t\tmap.addControl(new mapbox.GeolocateControl());\n\t\t\t}\n\t\t\t\n\t\t\t// Get initial zoom level\n\t\t\tmap.on(\"load\", () => {\n\t\t\t\tzoom = map.getZoom();\n\t\t\t\tcenter = map.getCenter();\n\t\t\t\tloaded = true;\n\t\t\t\t\n\t\t\t\t// Prevent map from being tabbable\n\t\t\t\tif (!tabbable && document.querySelector(`#${id} canvas`)) {\n\t\t\t\t\tdocument.querySelector(`#${id} canvas`).tabIndex = \"-1\";\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Update zoom level and center when the view changes\n\t\t\tmap.on(\"moveend\", () => {\n\t\t\t\tzoom = map.getZoom();\n\t\t\t\tcenter = map.getCenter();\n\t\t\t});\n\t\t};\n\n\t\tdocument.head.appendChild(link);\n\n\t\treturn () => {\n\t\t\tmap.remove();\n\t\t\tlink.parentNode.removeChild(link);\n\t\t};\n\t});\n\n\t// Function that forces map to resize to fit parent div, in case it doesn't automatically\n\tfunction resizeCanvas() {\n\t\tif (loaded) {\n\t\t\tlet canvas = document.getElementsByClassName(\"mapboxgl-canvas\");\n\t\t  if (canvas[0]) {\n\t\t\t  canvas[0].style.width = \"100%\";\n\t\t\t  canvas[0].style.height = \"100%\";\n\t\t\t  map.resize();\n\t\t  }\n\t\t}\n\t}\n\n\t// Invoke above function when parent div size changes\n\t$: (w || h) && resizeCanvas();\n</script>\n\n<div bind:clientWidth={w} bind:clientHeight={h} bind:this={container} {id}>\n\t{#if loaded}\n\t\t<slot />\n\t{/if}\n</div>\n\n<style>\n\t:global(.mapboxgl-control-container button) {\n\t\tmargin: 0;\n\t}\n\tdiv {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>",
    "<script>\n  import { getContext } from 'svelte';\n  import mapbox from './lib/mapbox-gl@1.13.2';\n\t// Mapbox source code is bundled due to versioning & ES6 import issues\n\t// https://cdn.skypack.dev/-/mapbox-gl@v1.13.2-asizChmwkQobquJNQjgb/dist=es2020,mode=imports,min/optimized/mapbox-gl.js\n\n  export let content;\n\n  const tooltip = new mapbox.Popup({\n\t\tcloseButton: false,\n\t\tcloseOnClick: false\n\t});\n\n  const { getMap } = getContext('map');\n\tconst map = getMap();\n  const hoverObj = getContext('hover');\n\n  function updateTooltip(obj, content) {\n    if (obj.id) {\n      tooltip\n\t\t\t.setLngLat(obj.event.lngLat)\n      .setHTML(content ? content : obj.code)\n      .addTo(map);\n    } else {\n      tooltip.remove();\n    }\n  }\n\n  $: updateTooltip($hoverObj, content);\n</script>\n\n<style>\n  :global(.mapboxgl-popup-content) {\n\t\tpadding: 5px 10px !important;\n\t}\n</style>",
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\r\n\t// CORE IMPORTS\r\n\timport { setContext, onMount } from \"svelte\";\r\n\timport { getMotion } from \"./utils.js\";\r\n\timport { themes } from \"./config.js\";\r\n\timport ONSHeader from \"./layout/ONSHeader.svelte\";\r\n\timport ONSFooter from \"./layout/ONSFooter.svelte\";\r\n\timport Header from \"./layout/Header.svelte\";\r\n\timport Section from \"./layout/Section.svelte\";\r\n\timport Media from \"./layout/Media.svelte\";\r\n\timport Scroller from \"./layout/Scroller.svelte\";\r\n\timport Filler from \"./layout/Filler.svelte\";\r\n\timport Divider from \"./layout/Divider.svelte\";\r\n\timport Toggle from \"./ui/Toggle.svelte\";\r\n\timport Arrow from \"./ui/Arrow.svelte\";\r\n\timport Em from \"./ui/Em.svelte\";\r\n\r\n\t// DEMO-SPECIFIC IMPORTS\r\n\timport bbox from \"@turf/bbox\";\r\n\timport { getData, setColors, getTopo, getBreaks, getColor } from \"./utils.js\";\r\n\timport { colors, units } from \"./config.js\";\r\n\timport { ScatterChart, LineChart, BarChart } from \"@onsvisual/svelte-charts\";\r\n\timport { Map, MapSource, MapLayer, MapTooltip } from \"@onsvisual/svelte-maps\";\r\n\r\n\t// CORE CONFIG (COLOUR THEMES)\r\n\t// Set theme globally (options are 'light', 'dark' or 'lightblue')\r\n\tlet theme = \"light\";\r\n\tsetContext(\"theme\", theme);\r\n\tsetColors(themes, theme);\r\n\r\n\t// CONFIG FOR SCROLLER COMPONENTS\r\n\t// Config\r\n\tconst threshold = 0.65;\r\n\t// State\r\n\tlet animation = getMotion(); // Set animation preference depending on browser preference\r\n\tlet id = {}; // Object to hold visible section IDs of Scroller components\r\n\tlet idPrev = {}; // Object to keep track of previous IDs, to compare for changes\r\n\tonMount(() => {\r\n\t\tidPrev = {...id};\r\n\t});\r\n\r\n\t// DEMO-SPECIFIC CONFIG\r\n\t// Constants\r\n\tconst datasets = [\"region\", \"district\"];\r\n\tconst topojson = \"./data/geo_lad2021.json\";\r\n\tconst mapstyle = \"https://bothness.github.io/ons-basemaps/data/style-omt.json\";\r\n\tconst mapbounds = {\r\n\t\tuk: [\r\n\t\t\t[-9, 49 ],\r\n\t\t\t[ 2, 61 ]\r\n\t\t]\r\n\t};\r\n\r\n\t// Data\r\n\tlet data = {district: {}, region: {}};\r\n\tlet metadata = {district: {}, region: {}};\r\n\tlet geojson;\r\n\r\n\t// Element bindings\r\n\tlet map = null; // Bound to mapbox 'map' instance once initialised\r\n\r\n\t// State\r\n\tlet hovered; // Hovered district (chart or map)\r\n\tlet selected; // Selected district (chart or map)\r\n\t$: region = selected && metadata.district.lookup ? metadata.district.lookup[selected].parent : null; // Gets region code for 'selected'\r\n\t$: chartHighlighted = metadata.district.array && region ? metadata.district.array.filter(d => d.parent == region).map(d => d.code) : []; // Array of district codes in 'region'\r\n\tlet mapHighlighted = []; // Highlighted district (map only)\r\n\tlet xKey = \"area\"; // xKey for scatter chart\r\n\tlet yKey = null; // yKey for scatter chart\r\n\tlet zKey = null; // zKey (color) for scatter chart\r\n\tlet rKey = null; // rKey (radius) for scatter chart\r\n\tlet mapKey = \"density\"; // Key for data to be displayed on map\r\n\tlet explore = false; // Allows chart/map interactivity to be toggled on/off\r\n\r\n\t// FUNCTIONS (INCL. SCROLLER ACTIONS)\r\n\r\n\t// Functions for chart and map on:select and on:hover events\r\n\tfunction doSelect(e) {\r\n\t\tconsole.log(e);\r\n\t\tselected = e.detail.id;\r\n\t\tif (e.detail.feature) fitById(selected); // Fit map if select event comes from map\r\n\t}\r\n\tfunction doHover(e) {\r\n\t\thovered = e.detail.id;\r\n\t}\r\n\r\n\t// Functions for map component\r\n\tfunction fitBounds(bounds) {\r\n\t\tif (map) {\r\n\t\t\tmap.fitBounds(bounds, {animate: animation, padding: 30});\r\n\t\t}\r\n\t}\r\n\tfunction fitById(id) {\r\n\t\tif (geojson && id) {\r\n\t\t\tlet feature = geojson.features.find(d => d.properties.AREACD == id);\r\n\t\t\tlet bounds = bbox(feature.geometry);\r\n\t\t\tfitBounds(bounds);\r\n\t\t}\r\n\t}\r\n\r\n\t// Actions for Scroller components\r\n\tconst actions = {\r\n\t\tmap: { // Actions for <Scroller/> with id=\"map\"\r\n\t\t\tmap01: () => { // Action for <section/> with data-id=\"map01\"\r\n\t\t\t\tfitBounds(mapbounds.uk);\r\n\t\t\t\tmapKey = \"density\";\r\n\t\t\t\tmapHighlighted = [];\r\n\t\t\t\texplore = false;\r\n\t\t\t},\r\n\t\t\tmap02: () => {\r\n\t\t\t\tfitBounds(mapbounds.uk);\r\n\t\t\t\tmapKey = \"age_med\";\r\n\t\t\t\tmapHighlighted = [];\r\n\t\t\t\texplore = false;\r\n\t\t\t},\r\n\t\t\tmap03: () => {\r\n\t\t\t\tlet hl = [...data.district.indicators].sort((a, b) => b.age_med - a.age_med)[0];\r\n\t\t\t\tfitById(hl.code);\r\n\t\t\t\tmapKey = \"age_med\";\r\n\t\t\t\tmapHighlighted = [hl.code];\r\n\t\t\t\texplore = false;\r\n\t\t\t},\r\n\t\t\tmap04: () => {\r\n\t\t\t\tfitBounds(mapbounds.uk);\r\n\t\t\t\tmapKey = \"age_med\";\r\n\t\t\t\tmapHighlighted = [];\r\n\t\t\t\texplore = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\tchart: {\r\n\t\t\tchart01: () => {\r\n\t\t\t\txKey = \"area\";\r\n\t\t\t\tyKey = null;\r\n\t\t\t\tzKey = null;\r\n\t\t\t\trKey = null;\r\n\t\t\t\texplore = false;\r\n\t\t\t},\r\n\t\t\tchart02: () => {\r\n\t\t\t\txKey = \"area\";\r\n\t\t\t\tyKey = null;\r\n\t\t\t\tzKey = null;\r\n\t\t\t\trKey = \"pop\";\r\n\t\t\t\texplore = false;\r\n\t\t\t},\r\n\t\t\tchart03: () => {\r\n\t\t\t\txKey = \"area\";\r\n\t\t\t\tyKey = \"density\";\r\n\t\t\t\tzKey = null;\r\n\t\t\t\trKey = \"pop\";\r\n\t\t\t\texplore = false;\r\n\t\t\t},\r\n\t\t\tchart04: () => {\r\n\t\t\t\txKey = \"area\";\r\n\t\t\t\tyKey = \"density\";\r\n\t\t\t\tzKey = \"parent_name\";\r\n\t\t\t\trKey = \"pop\";\r\n\t\t\t\texplore = false;\r\n\t\t\t},\r\n\t\t\tchart05: () => {\r\n\t\t\t\txKey = \"area\";\r\n\t\t\t\tyKey = \"density\";\r\n\t\t\t\tzKey = null;\r\n\t\t\t\trKey = \"pop\";\r\n\t\t\t\texplore = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Code to run Scroller actions when new caption IDs come into view\r\n\tfunction runActions(codes = []) {\r\n\t\tcodes.forEach(code => {\r\n\t\t\tif (id[code] != idPrev[code]) {\r\n\t\t\t\tif (actions[code][id[code]]) {\r\n\t\t\t\t\tactions[code][id[code]]();\r\n\t\t\t\t}\r\n\t\t\t\tidPrev[code] = id[code];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t$: id && runActions(Object.keys(actions)); // Run above code when 'id' object changes\r\n\r\n\t// INITIALISATION CODE\r\n\tdatasets.forEach(geo => {\r\n\t\tgetData(`./data/data_${geo}.csv`)\r\n\t\t.then(arr => {\r\n\t\t\tlet meta = arr.map(d => ({\r\n\t\t\t\tcode: d.code,\r\n\t\t\t\tname: d.name,\r\n\t\t\t\tparent: d.parent ? d.parent : null\r\n\t\t\t}));\r\n\t\t\tlet lookup = {};\r\n\t\t\tmeta.forEach(d => {\r\n\t\t\t\tlookup[d.code] = d;\r\n\t\t\t});\r\n\t\t\tmetadata[geo].array = meta;\r\n\t\t\tmetadata[geo].lookup = lookup;\r\n\r\n\t\t\tlet indicators = arr.map((d, i) => ({\r\n\t\t\t\t...meta[i],\r\n\t\t\t\tarea: d.area,\r\n\t\t\t\tpop: d['2020'],\r\n\t\t\t\tdensity: d.density,\r\n\t\t\t\tage_med: d.age_med\r\n\t\t\t}));\r\n\r\n\t\t\tif (geo == \"district\") {\r\n\t\t\t\t['density', 'age_med'].forEach(key => {\r\n\t\t\t\t\tlet values = indicators.map(d => d[key]).sort((a, b) => a - b);\r\n\t\t\t\t\tlet breaks = getBreaks(values);\r\n\t\t\t\t\tindicators.forEach((d, i) => indicators[i][key + '_color'] = getColor(d[key], breaks, colors.seq));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tdata[geo].indicators = indicators;\r\n\r\n\t\t\tlet years = [\r\n\t\t\t\t2001, 2002, 2003, 2004, 2005,\r\n\t\t\t\t2006, 2007, 2008, 2009, 2010,\r\n\t\t\t\t2011, 2012, 2013, 2014, 2015,\r\n\t\t\t\t2016, 2017, 2018, 2019, 2020\r\n\t\t\t];\r\n\r\n\t\t\tlet timeseries = [];\r\n\t\t\tarr.forEach(d => {\r\n\t\t\t\tyears.forEach(year => {\r\n\t\t\t\t\ttimeseries.push({\r\n\t\t\t\t\t\tcode: d.code,\r\n\t\t\t\t\t\tname: d.name,\r\n\t\t\t\t\t\tvalue: d[year],\r\n\t\t\t\t\t\tyear\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tdata[geo].timeseries = timeseries;\r\n\t\t});\r\n\t});\r\n\r\n\tgetTopo(topojson, 'geog')\r\n\t.then(geo => {\r\n\t\tgeo.features.sort((a, b) => a.properties.AREANM.localeCompare(b.properties.AREANM));\r\n\t\tgeojson = geo;\r\n\t});\r\n</script>\r\n\r\n<ONSHeader filled={true} center={false} />\r\n\r\n<Header bgcolor=\"#206095\" bgfixed={true} theme=\"dark\" center={false} short={true}>\r\n\t<h1>This is the title of the article</h1>\r\n\t<p class=\"text-big\" style=\"margin-top: 5px\">\r\n\t\tThis is a short text description of the article that might take up a couple of lines\r\n\t</p>\r\n\t<p style=\"margin-top: 20px\">\r\n\t\tDD MMM YYYY\r\n\t</p>\r\n\t<p>\r\n\t\t<Toggle label=\"Animation {animation ? 'on' : 'off'}\" mono={true} bind:checked={animation}/>\r\n\t</p>\r\n\t<div style=\"margin-top: 90px;\">\r\n\t\t<Arrow color=\"white\" {animation}>Scroll to begin</Arrow>\r\n\t</div>\r\n</Header>\r\n\r\n<Filler theme=\"lightblue\" short={true} wide={true} center={false}>\r\n\t<p class=\"text-big\">\r\n\t\tThis is a large, left-aligned text caption\r\n\t</p>\r\n</Filler>\r\n\r\n<Section>\r\n\t<h2>This is a section title</h2>\r\n\t<p>\r\n\t\tThis is a short paragraph of text to demonstrate the standard \"medium\" column width, font size and line spacing of the template.\r\n\t</p>\r\n\t<p>\r\n\t\tThis is a second short paragraph of text to demonstrate the size of the paragraph spacing in the template.\r\n\t</p>\r\n\t<blockquote class=\"text-indent\">\r\n\t\t\"This is an example of a large embedded quotation.\"&mdash;A. Person\r\n\t</blockquote>\r\n</Section>\r\n\r\n<Divider/>\r\n\r\n<Section>\r\n\t<h2>Embedded charts or media</h2>\r\n\t<p>\r\n\t\tBelow is an embedded chart. It is set to the same width as the column, \"medium\" (680px), but could also be \"narrow\" (540px), \"wide\" (980px) or \"full\" width. All options are responsive to fit the width of narrow screens.\r\n\t</p>\r\n</Section>\r\n\r\n{#if data.region.indicators}\r\n<Media\r\n\tcol=\"medium\"\r\n\tcaption=\"Source: ONS mid-year population estimates.\"\r\n>\r\n\t<div class=\"chart-sml\">\r\n\t\t<BarChart\r\n\t\t\tdata={[...data.region.indicators].sort((a, b) => a.pop - b.pop)}\r\n\t\t\txKey=\"pop\" yKey=\"name\"\r\n\t\t\tsnapTicks={false}\r\n\t\t\txFormatTick={d => (d / 1e6)} xSuffix=\"m\"\r\n\t\t\theight={350} padding={{top: 0, bottom: 15, left: 140, right: 0}}\r\n\t\t\tarea={false} title=\"Population by region/nation, 2020\"/>\r\n\t</div>\r\n</Media>\r\n{/if}\r\n\r\n<Divider/>\r\n\r\n<Section>\r\n\t<h2>Gridded charts or media</h2>\r\n\t<p>\r\n\t\tBelow is a grid that can contain charts or any other kind of visual media. The grid can fit in a medium, wide or full-width column, and the media width itself can be narrow (min 200px), medium (min 300px), wide (min 500px) or full-width. The grid is responsive, and will re-flow on smaller screens.\r\n\t</p>\r\n</Section>\r\n\r\n{#if data.region.timeseries && data.region.indicators}\r\n<Media\r\n\tcol=\"wide\"\r\n\tgrid=\"narrow\" gap={20}\r\n\tcaption=\"Source: ONS mid-year population estimates.\"\r\n>\r\n\t{#each [...data.region.indicators].sort((a, b) => b.pop - a.pop) as region}\r\n\t<div class=\"chart-sml\">\r\n\t\t<LineChart\r\n\t\t\tdata={data.region.timeseries}\r\n\t\t\txKey=\"year\" yKey=\"value\" zKey=\"code\"\r\n\t\t\tcolor=\"lightgrey\"\r\n\t\t\tlineWidth={1} xTicks={2} snapTicks={false}\r\n\t\t\tyFormatTick={d => (d / 1e6)} ySuffix=\"m\"\r\n\t\t\theight={200} padding={{top: 0, bottom: 20, left: 30, right: 15}}\r\n\t\t\tselected={region.code}\r\n\t\t\tarea={false} title={region.name}/>\r\n\t</div>\r\n\t{/each}\r\n</Media>\r\n{/if}\r\n\r\n<Divider />\r\n\r\n<Section>\r\n\t<h2>This is a dynamic chart section</h2>\r\n\t<p>\r\n\t\tThe chart below will respond to the captions as you scroll down. The \"Scroller\" component is\r\n\t\tset to \"splitscreen\" mode, which means the captions will be on the left side on larger screens.\r\n\t</p>\r\n\t<p>\r\n\t\tThe interactions are via Javascript functions that are called when each caption scrolls into view.\r\n\t</p>\r\n</Section>\r\n\r\n<Scroller {threshold} bind:id={id['chart']} splitscreen={true}>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-wide height-full\">\r\n\t\t\t\t{#if data.district.indicators && metadata.region.lookup}\r\n\t\t\t\t\t<div class=\"chart\">\r\n\t\t\t\t\t\t<ScatterChart\r\n\t\t\t\t\t\t\theight=\"calc(100vh - 150px)\"\r\n\t\t\t\t\t\t\tdata={data.district.indicators.map(d => ({...d, parent_name: metadata.region.lookup[d.parent].name}))}\r\n\t\t\t\t\t\t\tcolors={explore ? ['lightgrey'] : colors.cat}\r\n\t\t\t\t\t\t\t{xKey} {yKey} {zKey} {rKey} idKey=\"code\" labelKey=\"name\"\r\n\t\t\t\t\t\t\tr={[3,10]}\r\n\t\t\t\t\t\t\txScale=\"log\"\r\n\t\t\t\t\t\t\txTicks={[10, 100, 1000, 10000]} xFormatTick={d => d.toLocaleString()}\r\n\t\t\t\t\t\t\txSuffix=\" sq.km\"\r\n\t\t\t\t\t\t\tyFormatTick={d => d.toLocaleString()}\r\n\t\t\t\t\t\t\tlegend={zKey != null} labels\r\n\t\t\t\t\t\t\tselect={explore} selected={explore ? selected : null} on:select={doSelect}\r\n\t\t\t\t\t\t\thover {hovered} on:hover={doHover}\r\n\t\t\t\t\t\t\thighlighted={explore ? chartHighlighted : []}\r\n\t\t\t\t\t\t\tcolorSelect=\"#206095\" colorHighlight=\"#999\" overlayFill\r\n\t\t\t\t\t\t\t{animation}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/if}\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"chart01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThis chart shows the <strong>area in square kilometres</strong> of each local authority district in the UK. Each circle represents one district. The scale is logarithmic.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"chart02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThe radius of each circle shows the <strong>total population</strong> of the district.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"chart03\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThe vertical axis shows the <strong>density</strong> of the district in people per hectare.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"chart04\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThe colour of each circle shows the <strong>part of the country</strong> that the district is within.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"chart05\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<h3>Select a district</h3>\r\n\t\t\t\t<p>Use the selection box below or click on the chart to select a district. The chart will also highlight the other districts in the same part of the country.</p>\r\n\t\t\t\t{#if geojson}\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<!-- svelte-ignore a11y-no-onchange -->\r\n\t\t\t\t\t\t<select bind:value={selected}>\r\n\t\t\t\t\t\t\t<option value={null}>Select one</option>\r\n\t\t\t\t\t\t\t{#each geojson.features as place}\r\n\t\t\t\t\t\t\t\t<option value={place.properties.AREACD}>\r\n\t\t\t\t\t\t\t\t\t{place.properties.AREANM}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t{/if}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t</div>\r\n</Scroller>\r\n\r\n<Divider />\r\n\r\n<Section>\r\n\t<h2>This is a full-width chart demo</h2>\r\n\t<p>\r\n\t\tBelow is an example of a media grid where the column with is set to \"full\". This allows for full width images and charts.\r\n\t</p>\r\n\t<p>\r\n\r\n\t</p>\r\n</Section>\r\n\r\n<Media\r\n\tcol=\"full\"\r\n\theight={600}\r\n\tcaption='This is an optional caption for the above chart or media. It can contain HTML code and <a href=\"#\">hyperlinks</a>, and wrap onto multiple lines.'\r\n>\r\n\t<div class=\"chart-full\">\r\n\t\t{#if data.district.timeseries}\r\n\t\t<LineChart\r\n\t\t\tdata={data.district.timeseries}\r\n\t\t\tpadding={{left: 50, right: 150, top: 0, bottom: 0}}\r\n\t\t\theight=\"500px\"\r\n\t\t\txKey=\"year\" yKey=\"value\" zKey=\"code\"\r\n\t\t\tcolor=\"lightgrey\" lineWidth={1}\r\n\t\t\tyFormatTick={d => (d/1e6).toFixed(1)} ySuffix=\"m\"\r\n\t\t\tselect {selected} on:select={doSelect}\r\n\t\t\thover {hovered} on:hover={doHover}\r\n\t\t\thighlighted={chartHighlighted}\r\n\t\t\tcolorSelect=\"#206095\" colorHighlight=\"#999\"\r\n\t\t\tarea={false} title=\"Mid-year population by district, 2001 to 2020\"\r\n\t\t\tlabels labelKey=\"name\"/>\r\n\t\t{/if}\r\n\t</div>\r\n</Media>\r\n\r\n<Divider />\r\n\r\n<Section>\r\n\t<h2>This is a dynamic map section</h2>\r\n\t<p class=\"mb\">\r\n\t\tThe map below will respond to the captions as you scroll down. The scroller is not set to splitscreen, so captions are placed over the map on any screen size.\r\n\t</p>\r\n</Section>\r\n\r\n{#if geojson && data.district.indicators}\r\n<Scroller {threshold} bind:id={id['map']}>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-full height-full\">\r\n\t\t\t\t<Map style={mapstyle} bind:map interactive={false} location={{bounds: mapbounds.uk}}>\r\n\t\t\t\t\t<MapSource\r\n\t\t\t\t\t  id=\"lad\"\r\n\t\t\t\t\t  type=\"geojson\"\r\n\t\t\t\t\t  data={geojson}\r\n\t\t\t\t\t  promoteId=\"AREACD\"\r\n\t\t\t\t\t  maxzoom={13}>\r\n\t\t\t\t\t  <MapLayer\r\n\t\t\t\t\t  \tid=\"lad-fill\"\r\n\t\t\t\t\t\t\tidKey=\"code\"\r\n\t\t\t\t\t\t\tcolorKey={mapKey + \"_color\"}\r\n\t\t\t\t\t  \tdata={data.district.indicators}\r\n\t\t\t\t\t  \ttype=\"fill\"\r\n\t\t\t\t\t\t\tselect {selected} on:select={doSelect} clickIgnore={!explore}\r\n\t\t\t\t\t\t\thover {hovered} on:hover={doHover}\r\n\t\t\t\t\t\t\thighlight highlighted={mapHighlighted}\r\n\t\t\t\t\t  \tpaint={{\r\n\t\t\t\t\t  \t\t'fill-color': ['case',\r\n\t\t\t\t\t  \t\t\t['!=', ['feature-state', 'color'], null], ['feature-state', 'color'],\r\n\t\t\t\t\t  \t\t\t'rgba(255, 255, 255, 0)'\r\n\t\t\t\t\t  \t\t],\r\n\t\t\t\t\t  \t\t'fill-opacity': 0.7\r\n\t\t\t\t\t  \t}}>\r\n\t\t\t\t\t\t\t\t<MapTooltip content={\r\n\t\t\t\t\t\t\t\t\thovered ? `${metadata.district.lookup[hovered].name}<br/><strong>${data.district.indicators.find(d => d.code == hovered)[mapKey].toLocaleString()} ${units[mapKey]}</strong>` : ''\r\n\t\t\t\t\t\t\t\t}/>\r\n\t\t\t\t\t\t\t</MapLayer>\r\n\t\t\t\t\t\t<MapLayer\r\n\t\t\t\t\t  \tid=\"lad-line\"\r\n\t\t\t\t\t  \ttype=\"line\"\r\n\t\t\t\t\t  \tpaint={{\r\n\t\t\t\t\t  \t\t'line-color': ['case',\r\n\t\t\t\t\t  \t\t\t['==', ['feature-state', 'hovered'], true], 'orange',\r\n\t\t\t\t\t  \t\t\t['==', ['feature-state', 'selected'], true], 'black',\r\n\t\t\t\t\t  \t\t\t['==', ['feature-state', 'highlighted'], true], 'black',\r\n\t\t\t\t\t  \t\t\t'rgba(255,255,255,0)'\r\n\t\t\t\t\t  \t\t],\r\n\t\t\t\t\t  \t\t'line-width': 2\r\n\t\t\t\t\t  \t}}\r\n\t\t\t\t    />\r\n\t\t\t\t  </MapSource>\r\n\t\t\t\t</Map>\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"map01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThis map shows <strong>population density</strong> by district. Districts are coloured from <Em color={colors.seq[0]}>least dense</Em> to <Em color={colors.seq[4]}>most dense</Em>. You can hover to see the district name and density.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"map02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThe map now shows <strong>median age</strong>, from <Em color={colors.seq[0]}>youngest</Em> to <Em color={colors.seq[4]}>oldest</Em>.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"map03\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<!-- This gets the data object for the district with the oldest median age -->\r\n\t\t\t\t{#each [[...data.district.indicators].sort((a, b) => b.age_med - a.age_med)[0]] as district}\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThe map is now zoomed on <Em color={district.age_med_color}>{district.name}</Em>, the district with the oldest median age, {district.age_med} years.\r\n\t\t\t\t</p>\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"map04\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<h3>Select a district</h3>\r\n\t\t\t\t<p>Use the selection box below or click on the map to select and zoom to a district.</p>\r\n\t\t\t\t{#if geojson}\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<!-- svelte-ignore a11y-no-onchange -->\r\n\t\t\t\t\t\t<select bind:value={selected} on:change={() => fitById(selected)}>\r\n\t\t\t\t\t\t\t<option value={null}>Select one</option>\r\n\t\t\t\t\t\t\t{#each geojson.features as place}\r\n\t\t\t\t\t\t\t\t<option value={place.properties.AREACD}>\r\n\t\t\t\t\t\t\t\t\t{place.properties.AREANM}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t{/if}\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t</div>\r\n</Scroller>\r\n{/if}\r\n\r\n<Divider />\r\n\r\n<Section>\r\n\t<h2>How to use this template</h2>\r\n\t<p>\r\n\t\tYou can find the source code and documentation on how to use this template in <a href=\"https://github.com/ONSvisual/svelte-scrolly/\" target=\"_blank\">this Github repo</a>.\r\n\t</p>\r\n</Section>\r\n\r\n<ONSFooter />\r\n\r\n<style>\r\n\t/* Styles specific to elements within the demo */\r\n\t:global(svelte-scroller-foreground) {\r\n\t\tpointer-events: none !important;\r\n\t}\r\n\t:global(svelte-scroller-foreground section div) {\r\n\t\tpointer-events: all !important;\r\n\t}\r\n\tselect {\r\n\t\tmax-width: 350px;\r\n\t}\r\n\t.chart {\r\n\t\tmargin-top: 45px;\r\n\t\twidth: calc(100% - 5px);\r\n\t}\r\n\t.chart-full {\r\n\t\tmargin: 0 20px;\r\n\t}\r\n\t.chart-sml {\r\n\t\tfont-size: 0.85em;\r\n\t}\r\n\t/* The properties below make the media DIVs grey, for visual purposes in demo */\r\n\t.media {\r\n\t\tbackground-color: #f0f0f0;\r\n\t\tdisplay: -webkit-box;\r\n\t\tdisplay: -ms-flexbox;\r\n\t\tdisplay: flex;\r\n\t\t-webkit-box-orient: vertical;\r\n\t\t-webkit-box-direction: normal;\r\n\t\t-ms-flex-flow: column;\r\n\t\tflex-flow: column;\r\n\t\t-webkit-box-pack: center;\r\n\t\t-ms-flex-pack: center;\r\n\t\tjustify-content: center;\r\n\t\ttext-align: center;\r\n\t\tcolor: #aaa;\r\n\t}\r\n</style>\r\n",
    "<script>\r\n\timport { themes } from '../config.js';\r\n\timport { getContext } from 'svelte';\r\n\r\n  export let theme = getContext('theme');\r\n  export let hr = true;\r\n</script>\r\n\r\n<section style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"col-medium\">\r\n    {#if hr}\r\n    <hr style=\"color: {themes[theme]['muted']}\"/>\r\n    {:else}\r\n    <hr style=\"color: {themes[theme]['muted']}; border: none;\"/>\r\n    {/if}\r\n\t</div>\r\n</section>\r\n\r\n<style>\r\n  hr {\r\n    width: 75px;\r\n    border: none;\r\n    border-top: 2px solid;\r\n    margin: 40px auto -10px auto;\r\n  }\r\n</style>\r\n\r\n",
    "<script>\r\n\timport { themes } from '../config.js';\r\n\timport { getContext } from 'svelte';\r\n\r\n\texport let theme = getContext('theme');\r\n\texport let center = true;\r\n\texport let wide = false;\r\n\texport let short = false;\r\n</script>\r\n\r\n<style>\r\n\tsection {\r\n\t\tpadding: 36px 0;\r\n\t}\r\n\t.short {\r\n\t\tmin-height: 70vh;\r\n\t}\r\n</style>\r\n\r\n<section style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"middle\" class:center class:col-medium={!wide} class:col-wide={wide} class:height-full={!short} class:short>\r\n\t\t<slot></slot>\r\n\t</div>\r\n</section>",
    "<script>\r\n  import { themes } from '../config.js';\r\n\timport { getContext } from 'svelte';\r\n\r\n\texport let theme = getContext('theme');\r\n  export let bgimage = null;\r\n  export let bgcolor = null;\r\n  export let bgfixed = false;\r\n  export let center = true;\r\n  export let short = false;\r\n\r\n  let style = '';\r\n\r\n  if (bgimage) {\r\n    style += `background-image: url(${bgimage});`;\r\n  } else {\r\n    style += 'background-image: none;';\r\n  }\r\n\r\n  if (bgfixed) {\r\n    style += ' background-attachment: fixed;';\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .short {\r\n    min-height: 85vh;\r\n  }\r\n  .v-padded {\r\n    box-sizing: border-box;\r\n    padding: 40px 0;\r\n  }\r\n</style>\r\n\r\n<header style=\"color: {themes[theme]['text']}; background-color: {bgcolor ? bgcolor : themes[theme]['background']}; {style}\" class:short>\r\n\t<div class=\"v-padded col-wide middle\" style=\"position: relative\" class:short class:height-full={!short}>\r\n\t\t<div class:center>\r\n\t\t\t<slot></slot>\r\n    </div>\r\n\t</div>\r\n</header>",
    "<script>\r\n\timport { themes } from \"../config.js\";\r\n\timport { onMount, getContext } from \"svelte\";\r\n\timport { debounce } from \"debounce\";\r\n\r\n\tconst colWidths = {\r\n\t\tnarrow: 200,\r\n\t\tmedium: 300,\r\n\t\twide: 500,\r\n\t};\r\n\r\n\texport let theme = getContext(\"theme\");\r\n\texport let col = \"medium\";\r\n\texport let grid = null;\r\n\texport let caption = null;\r\n\texport let height = 200;\r\n\texport let gap = 12;\r\n\r\n\tlet gridClass = grid ? ` grid-${grid}` : '';\r\n\r\n\tlet nogrid = !(\"grid-gap\" in document.body.style);\r\n\t\r\n\tlet rowHeight = !Number.isNaN(height) ? height + \"px\" : height;\r\n\r\n\tlet gridGap = !Number.isNaN(gap) ? gap + \"px\" : gap;\r\n\r\n\t// The code below this point mimics CSS Grid functionality in IE 11\r\n\tconst minWidth = grid && colWidths[grid] ? colWidths[grid] : null;\r\n\r\n\tlet gridWidth;\r\n\tlet cols;\r\n\r\n\tlet el;\r\n\tlet divs;\r\n\tlet count;\r\n\r\n\tif (nogrid) {\r\n\t\tonMount(() => {\r\n\t\t\tresize();\r\n\t\t});\r\n\t}\r\n\r\n\tconst update = debounce(resize, 200);\r\n\r\n\tfunction resize() {\r\n\t\tif (el && !divs) {\r\n\t\t\tlet arr = [];\r\n\t\t\tlet children = el.childNodes;\r\n\t\t\tchildren.forEach((child) => {\r\n\t\t\t\tif (child.nodeName == \"DIV\") {\r\n\t\t\t\t\tarr.push(child);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tdivs = arr;\r\n\t\t}\r\n\t\tcount = divs.length;\r\n\t\tcols = !minWidth || gridWidth <= minWidth ? 1 : Math.floor(gridWidth / minWidth);\r\n\t\tmakeCols();\r\n\t}\r\n\r\n\tfunction makeCols() {\r\n\t\tlet r =\r\n\t\t\tMath.ceil(count / cols) > 1\r\n\t\t\t\t? `-ms-grid-rows: 1fr (${gap}px 1fr)[${\r\n\t\t\t\t\t\tMath.ceil(count / cols) - 1\r\n\t\t\t\t  }]; grid-template-rows: 1fr repeat(${\r\n\t\t\t\t\t\tMath.ceil(count / cols) - 1\r\n\t\t\t\t  }, ${gap}px 1fr);`\r\n\t\t\t\t: `-ms-grid-rows: 1fr; grid-template-rows: 1fr;`;\r\n\t\tlet c =\r\n\t\t\tcols > 1\r\n\t\t\t\t? `-ms-grid-columns: 1fr (${gap}px 1fr)[${\r\n\t\t\t\t\t\tcols - 1\r\n\t\t\t\t  }]; grid-template-columns: 1fr repeat(${cols - 1}, ${gap}px 1fr);`\r\n\t\t\t\t: \"\";\r\n\t\tel.style.cssText = r + c;\r\n\t\tdivs.forEach((div, i) => {\r\n\t\t\tlet col = (i % cols) * 2 + 1;\r\n\t\t\tlet row = Math.floor(i / cols) * 2 + 1;\r\n\t\t\tdiv.style.cssText = `-ms-grid-column: ${col}; -ms-grid-row: ${row}; grid-column: ${col}; grid-row: ${row}; min-height: ${rowHeight};`;\r\n\t\t});\r\n\t}\r\n\r\n\t$: nogrid && (minWidth || gridWidth) && update();\r\n</script>\r\n\r\n{#if nogrid}\r\n<figure style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"col-{col}\">\r\n\t\t<div bind:this={el} bind:clientWidth={gridWidth} class=\"grid-ms\">\r\n\t\t\t<slot></slot>\r\n\t\t</div>\r\n\t</div>\r\n</figure>\r\n{:else}\r\n<figure style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t<div class=\"col-{col}\">\r\n\t\t<div class=\"grid{gridClass}\" style=\"grid-gap: {gridGap}; min-height: {rowHeight}\">\r\n\t\t\t<slot></slot>\r\n\t\t</div>\r\n  </div>\r\n</figure>\r\n{/if}\r\n{#if caption}\r\n\t<caption style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\r\n\t\t<div class=\"col-medium\">\r\n\t\t\t<div class=\"caption\">{@html caption}</div>\r\n\t\t</div>\r\n\t</caption>\r\n{/if}\r\n\r\n<style>\r\n\t.grid-ms {\r\n\t\tdisplay: grid;\r\n\t\tdisplay: -ms-grid;\r\n\t\t-ms-grid-columns: 1fr;\r\n\t\tgrid-template-columns: 1fr;\r\n\t\tmargin-top: 40px;\r\n\t}\r\n\t.grid {\r\n\t\tdisplay: -ms-grid;\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: repeat(auto-fill, 100%);\r\n\t\tmargin: 40px 0 0 0;\r\n\t}\r\n\t.grid-narrow {\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(200px, 1fr)) !important;\r\n\t}\r\n\t.grid-medium {\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(300px, 1fr)) !important;\r\n\t}\r\n\t.grid-wide {\r\n\t\tgrid-template-columns: repeat(auto-fill, minmax(500px, 1fr)) !important;\r\n\t}\r\n\t:global(.grid > div) {\r\n\t\tmin-height: inherit;\r\n\t}\r\n</style>\r\n",
    "<script>\r\n\timport { themes } from '../config.js';\r\n\timport { getContext } from 'svelte';\r\n\r\n\texport let theme = getContext('theme');\r\n</script>\r\n\r\n<footer style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['pale']};\">\r\n\t<div class=\"col-wide\" data-analytics=\"footer\">\r\n\t\t<a href=\"https://www.ons.gov.uk/\">\r\n\t\t\t{#if theme == 'dark'}\r\n\t\t\t<img\r\n\t\t\t\tclass=\"logo-img\"\r\n\t\t\t\tsrc=\"./img/ons-logo-neg-en.svg\"\r\n\t\t\t\talt=\"Office for National Statistics\" />\r\n\t\t\t{:else}\r\n\t\t\t<img\r\n\t\t\t\tclass=\"logo-img\"\r\n\t\t\t\tsrc=\"./img/ons-logo-black-en.svg\"\r\n\t\t\t\talt=\"Office for National Statistics\" />\r\n\t\t\t{/if}\r\n\t\t</a>\r\n\t\t<ul>\r\n\t\t\t<li><a href=\"https://www.ons.gov.uk/aboutus/contactus\" class=\"link\" style=\"color: {themes[theme]['text']}\">Contact us</a></li>\r\n\t\t\t<li><a href=\"https://www.ons.gov.uk/help/privacynotice\" class=\"link\" style=\"color: {themes[theme]['text']}\">Cookies and privacy</a></li>\r\n\t\t</ul>\r\n\t\t<hr style=\"border-top-color: {themes[theme]['muted']}\" />\r\n\t\t<div class=\"license\">\r\n\t\t\t<svg class=\"ogl-img\" viewBox=\"0 0 59 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t\t<title>UK Open Government Licence</title>\r\n\t\t\t\t<path fill=\"{themes[theme]['muted']}\" d=\"M59,17.5v6.2H45.3V4l6.2-3.9v17.4H59z M33.6,13h9.8v10.7H43L40.6,21c-2.1,1.8-4.9,3-7.9,3 c-4.4,0-8.3-2.4-10.4-6.1c-2.1,3.6-5.9,6.1-10.4,6.1C5.4,23.9,0,18.6,0,12C0,5.4,5.4,0.1,11.9,0.1c4.5,0,8.4,2.5,10.4,6.1 c2.1-3.6,5.9-6.1,10.4-6.1c4.2,0,7.9,2.2,10.1,5.5l-5.2,3.3c-1-1.6-2.8-2.7-4.8-2.7C29.6,6.2,27,8.8,27,12s2.6,5.8,5.8,5.8 c1.5,0,2.8-0.5,3.8-1.4L33.6,13z M17.7,12c0-3.2-2.6-5.7-5.8-5.7S6.2,8.8,6.2,12s2.6,5.8,5.8,5.8S17.7,15.2,17.7,12z\"/>\r\n\t\t\t</svg>\r\n\t\t\tAll content is available under the\r\n\t\t\t<a\r\n\t\t\t\thref=\"https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\"\r\n\t\t\t\tclass=\"link\"\r\n\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\trel=\"noopener\"\r\n\t\t\t\tstyle=\"color: {themes[theme]['text']}\">Open Government Licence v3.0</a>, \r\n\t\t\texcept where otherwise stated\r\n\t\t</div>\r\n\t</div>\r\n</footer>\r\n\r\n<style>\r\n\tfooter {\r\n\t\tpadding-bottom: 72px;\r\n\t\tpadding-top: 36px;\r\n\t\tfont-size: 18px;\r\n\t}\r\n\tfooter a.link {\r\n\t\t-webkit-box-sizing: border-box;\r\n\t\tbox-sizing: border-box;\r\n\t\ttext-decoration: underline;\r\n\t\tdisplay: inline-block;\r\n\t}\r\n\tfooter a.link:hover {\r\n\t\ttext-decoration: none;\r\n\t}\r\n\tfooter a.link:active {\r\n\t\toutline: 3px solid transparent;\r\n\t\tbackground-color: #fd0;\r\n\t\t-webkit-box-shadow: 0 -2px #fd0, 0 4px #222;\r\n\t\tbox-shadow: 0 -2px #fd0, 0 4px #222;\r\n\t\tcolor: #222;\r\n\t\ttext-decoration: none;\r\n\t}\r\n\tfooter hr {\r\n\t\tmargin-bottom: 27px;\r\n\t\tmargin-top: 36px;\r\n\t\tborder: none;\r\n\t\tborder-top: 1px solid #777;\r\n\t}\r\n\tul {\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t}\r\n\tli {\r\n\t\tmargin-right: 18px;\r\n\t\tdisplay: inline-block;\r\n\t}\r\n\t.logo-img {\r\n\t\tmargin-bottom: 27px;\r\n\t}\r\n\t.ogl-img {\r\n\t\tmargin: 0 0.5rem 0.2rem 0;\r\n\t\twidth: 59px;\r\n\t\theight: 24px;\r\n\t\tvertical-align: middle;\r\n\t}\r\n\t.license {\r\n\t\tvertical-align: top;\r\n\t}\r\n\ta img:hover {\r\n\t\tcursor: pointer;\r\n\t}\r\n</style>",
    "<script>\r\n  import { themes } from '../config.js';\r\n\timport { getContext } from 'svelte';\r\n\r\n\texport let theme = getContext('theme');\r\n\texport let filled = false;\r\n\texport let center = true;\r\n</script>\r\n\r\n<nav style=\"border-bottom-color: {themes[theme]['muted']}; {filled ? 'background-color: ' +  themes[theme]['background'] + ';' : ''}\">\r\n  <div class=\"col-wide middle\" class:center>\r\n\t\t<a href=\"https://www.ons.gov.uk/\">\r\n\t\t\t<picture>\r\n\t\t\t\t{#if theme == 'dark'}\r\n\t\t\t\t<img src=\"./img/ons-logo-neg-en.svg\" alt=\"Office for National Statistics\">\r\n\t\t\t\t{:else if filled == true}\r\n\t\t\t\t<img src=\"./img/ons-logo-pos-en.svg\" alt=\"Office for National Statistics\">\r\n\t\t\t\t{:else}\r\n\t\t\t\t<img src=\"./img/ons-logo-black-en.svg\" alt=\"Office for National Statistics\">\r\n\t\t\t\t{/if}\r\n\t\t\t</picture>\r\n\t\t</a>\r\n  </div>\r\n</nav>\r\n\r\n<style>\r\n\tnav {\r\n\t\t-webkit-box-sizing: border-box;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t\theight: 46px;\r\n\t\tmargin-bottom: -46px;\r\n\t\tborder-bottom: 1px solid #777;\r\n\t\tz-index: 1;\r\n\t}\r\n\tpicture {\r\n\t\tposition: relative;\r\n\t\ttop: -3px;\r\n\t\tpadding: 0 5px;\r\n\t}\r\n\timg {\r\n\t\twidth: 270px;\r\n\t}\r\n\ta img:hover {\r\n\t\tcursor: pointer;\r\n\t}\r\n</style>",
    "<script context=\"module\">\r\n  // Based on svelte-scroller by Rich Harris\r\n  // https://github.com/sveltejs/svelte-scroller\r\n  // Patched to transpile to IE 11 and allow for split-screen view option\r\n\r\n\tconst handlers = [];\r\n\tlet manager;\r\n\r\n\tif (typeof window !== 'undefined') {\r\n\t\tconst run_all = () => handlers.forEach(fn => fn());\r\n\r\n\t\twindow.addEventListener('scroll', run_all);\r\n\t\twindow.addEventListener('resize', run_all);\r\n\t}\r\n\r\n\tif (typeof IntersectionObserver !== 'undefined') {\r\n\t\tconst map = new Map();\r\n\r\n\t\tconst observer = new IntersectionObserver((entries, observer) => {\r\n\t\t\tentries.forEach(entry => {\r\n\t\t\t\tconst update = map.get(entry.target);\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\r\n\t\t\t\tif (entry.isIntersecting) {\r\n\t\t\t\t\tif (index === -1) handlers.push(update);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdate();\r\n\t\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, {\r\n\t\t\trootMargin: '400px 0px' // TODO why 400?\r\n\t\t});\r\n\r\n\t\tmanager = {\r\n\t\t\tadd: ({ outer, update }) => {\r\n\t\t\t\tconst { top, bottom } = outer.getBoundingClientRect();\r\n\r\n\t\t\t\tif (top < window.innerHeight && bottom > 0) handlers.push(update);\r\n\r\n\t\t\t\tmap.set(outer, update);\r\n\t\t\t\tobserver.observe(outer);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ outer, update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\r\n\t\t\t\tmap.delete(outer);\r\n\t\t\t\tobserver.unobserve(outer);\r\n\t\t\t}\r\n\t\t};\r\n\t} else {\r\n\t\tmanager = {\r\n\t\t\tadd: ({ update }) => {\r\n\t\t\t\thandlers.push(update);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n</script>\r\n\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\t// config\r\n\texport let top = 0;\r\n\texport let bottom = 1;\r\n\texport let threshold = 0.5;\r\n\texport let query = 'section';\r\n\texport let parallax = false;\r\n\r\n\t// bindings\r\n\texport let index = 0;\r\n\texport let count = 0;\r\n\texport let offset = 0;\r\n\texport let progress = 0;\r\n\texport let visible = false;\r\n\texport let splitscreen = false; // Add class to allow for split screen option\r\n\texport let id = null;\r\n\r\n\tlet outer;\r\n  let bgContainer; // IE patch. Container binding to update inline style\r\n\tlet foreground;\r\n\tlet background;\r\n\tlet left;\r\n\tlet sections;\r\n\tlet wh = 0;\r\n\tlet fixed;\r\n\tlet offset_top;\r\n\tlet width = 1;\r\n\tlet height;\r\n\tlet inverted;\r\n\r\n\t$: top_px = Math.round(top * wh);\r\n\t$: bottom_px = Math.round(bottom * wh);\r\n\t$: threshold_px = Math.round(threshold * wh);\r\n\r\n\t$: (top, bottom, threshold, parallax, update());\r\n\r\n\tonMount(() => {\r\n\t\tsections = foreground.querySelectorAll(query);\r\n\t\tcount = sections.length;\r\n\r\n\t\tupdate();\r\n\r\n\t\tconst scroller = { outer, update };\r\n\r\n\t\tmanager.add(scroller);\r\n\t\treturn () => manager.remove(scroller);\r\n\t});\r\n\r\n\t// IE patch. BG container style (fixed/unfixed) set via function\r\n  function setFixed() {\r\n    if (bgContainer) {\r\n      let style = `position: ${fixed ? 'fixed' : 'absolute'}; top: 0; transform: translate(0, ${offset_top}px); width: ${width}px; z-index: ${inverted ? 3 : 1};`;\r\n      bgContainer.style.cssText = style;\r\n    }\r\n  }\r\n\r\n\tfunction update() {\r\n\t\tif (!foreground) return;\r\n\r\n\t\t// re-measure outer container\r\n\t\tconst bcr = outer.getBoundingClientRect();\r\n\t\tleft = bcr.left;\r\n\t\twidth = bcr.right - bcr.left;\r\n\r\n\t\t// determine fix state\r\n\t\tconst fg = foreground.getBoundingClientRect();\r\n\t\tconst bg = background.getBoundingClientRect();\r\n\r\n\t\tvisible = fg.top < wh && fg.bottom > 0;\r\n\r\n\t\tconst foreground_height = fg.bottom - fg.top;\r\n\t\tconst background_height = bg.bottom - bg.top;\r\n\r\n\t\tconst available_space = bottom_px - top_px;\r\n\t\tprogress = (top_px - fg.top) / (foreground_height - available_space);\r\n\r\n\t\tif (progress <= 0) {\r\n\t\t\toffset_top = 0;\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      } // Non-IE specific patch to avoid setting style repeatedly\r\n\t\t} else if (progress >= 1) {\r\n\t\t\toffset_top = parallax\r\n\t\t\t\t? (foreground_height - background_height)\r\n\t\t\t\t: (foreground_height - available_space);\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      }\r\n\t\t} else {\r\n\t\t\toffset_top = parallax ?\r\n\t\t\t\tMath.round(top_px - progress * (background_height - available_space)) :\r\n\t\t\t\ttop_px;\r\n      if (!fixed) {\r\n        fixed = true;\r\n        setFixed();\r\n      }\r\n\t\t}\r\n\r\n\t\tfor (index = 0; index < sections.length; index += 1) {\r\n\t\t\tconst section = sections[index];\r\n\t\t\tconst { top } = section.getBoundingClientRect();\r\n\r\n\t\t\tconst next = sections[index + 1];\r\n\t\t\tconst bottom = next ? next.getBoundingClientRect().top : fg.bottom;\r\n\r\n\t\t\toffset = (threshold_px - top) / (bottom - top);\r\n\t\t\tid = section.dataset.id ? section.dataset.id : null;\r\n\t\t\tif (bottom >= threshold_px) break;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<svelte:window bind:innerHeight={wh}/>\r\n\r\n<svelte-scroller-outer bind:this={outer} class:splitscreen>\r\n\t<svelte-scroller-background-container class='background-container' bind:this={bgContainer}>\r\n\t\t<svelte-scroller-background bind:this={background}>\r\n\t\t\t<slot name=\"background\"></slot>\r\n\t\t</svelte-scroller-background>\r\n\t</svelte-scroller-background-container>\r\n\r\n\t<svelte-scroller-foreground bind:this={foreground}>\r\n\t\t<slot name=\"foreground\"></slot>\r\n\t</svelte-scroller-foreground>\r\n</svelte-scroller-outer>\r\n\r\n<style>\r\n\tsvelte-scroller-outer {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-background {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground::after {\r\n\t\tcontent: ' ';\r\n\t\tdisplay: block;\r\n\t\tclear: both;\r\n\t}\r\n\r\n\tsvelte-scroller-background-container {\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t\tpointer-events: none;\r\n\t\t/* height: 100%; */\r\n\r\n\t\t/* in theory this helps prevent jumping */\r\n\t\twill-change: transform;\r\n\t\t/* -webkit-transform: translate3d(0, 0, 0);\r\n\t\t-moz-transform: translate3d(0, 0, 0);\r\n\t\ttransform: translate3d(0, 0, 0); */\r\n\t}\r\n</style>",
    "<script>\r\n  export let color = \"black\";\r\n  export let animation = true;\r\n\texport let center = true;\r\n\r\n  const colors = [\"black\", \"white\"];\r\n\r\n  color = colors.includes(color) ? color : \"black\";\r\n</script>\r\n\r\n{#if center}\r\n<slot></slot><br/>\r\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/>\r\n{:else}\r\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow left\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/><slot></slot>\r\n{/if}\r\n\r\n<style>\r\n\t.arrow {\r\n\t\twidth: 48px;\r\n\t\theight: 48px;\r\n\t}\r\n\t.left {\r\n\t\tmargin-right: 10px;\r\n\t}\r\n\t.bounce {\r\n\t\t-webkit-animation-duration: 2s;\r\n\t\t        animation-duration: 2s;\r\n\t\t-webkit-animation-iteration-count: infinite;\r\n\t\t        animation-iteration-count: infinite;\r\n\t\t-webkit-animation-name: bounce;\r\n\t\t        animation-name: bounce;\r\n\t\t-webkit-animation-timing-function: ease;\r\n\t\t        animation-timing-function: ease;\r\n\t}\r\n\t@-webkit-keyframes bounce {\r\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\r\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t}\r\n\t@keyframes bounce {\r\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\r\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\r\n\t}\r\n</style>",
    "<script>\r\n  import parse from 'parse-color';\r\n\r\n  export let color = 'lightgrey';\r\n\texport let nowrap = true;\r\n\r\n  function textColor(rgb) {\r\n\t\tconst brightness = ((rgb[0] * 299) + (rgb[1] * 587) + (rgb[2] * 114)) / 1000;\r\n\t\treturn (brightness > 125) ? 'black' : 'white';\r\n\t}\r\n\r\n  let text = 'black';\r\n\r\n\t$: rgb = parse(color).rgb;\r\n\t\r\n\t$: if (rgb) {\r\n\t\ttext = textColor(rgb);\r\n\t}\r\n\r\n</script>\r\n\r\n<span class=\"em\" class:nowrap style=\"background-color: {color}; color: {text};\" role=\"presentation\">\r\n  <slot></slot>\r\n</span>\r\n\r\n<style>\r\n\t.em {\r\n\t\tpadding: 1px 4px 1px 4px;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t.nowrap {\r\n\t\twhite-space: nowrap;\r\n\t}\r\n</style>",
    "<script>\r\n  export let id = \"switch\";\r\n  export let label = \"Label\";\r\n  export let mono = false;\r\n  export let checked;\r\n</script>\r\n\r\n<div class=\"switch\">\r\n  <input bind:checked {id} type=\"checkbox\" class=\"switch-input\" tabindex=\"0\" />\r\n  <label for={id} class=\"switch-label\" class:mono>{label}</label>\r\n</div>\r\n\r\n<style>\r\n  .switch {\r\n    position: relative;\r\n    display: inline-block;\r\n  }\r\n  .switch-input {\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    margin: -1px;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    border: 0;\r\n  }\r\n  .switch-label::before,\r\n  .switch-label::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    cursor: pointer;\r\n  }\r\n  .switch-label {\r\n    display: block;\r\n    cursor: pointer;\r\n    margin-top: -4px;\r\n    margin-left: 58px;\r\n  }\r\n  .switch-label::before {\r\n    -webkit-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n    top: 0;\r\n    left: 0;\r\n    width: 48px;\r\n    height: 24px;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    background-color: #aaa;\r\n    border-radius: 9999em;\r\n    -webkit-transition: background-color 0.25s ease;\r\n    -o-transition: background-color 0.25s ease;\r\n    transition: background-color 0.25s ease;\r\n  }\r\n  .switch-label::after {\r\n    top: 3px;\r\n    left: 3px;\r\n    width: 18px;\r\n    height: 18px;\r\n    border-radius: 50%;\r\n    background-color: #fff;\r\n    -webkit-transition: left 0.25s ease;\r\n    -o-transition: left 0.25s ease;\r\n    transition: left 0.25s ease;\r\n  }\r\n  .switch-input:checked + .switch-label::before {\r\n    background-color: rgb(32, 96, 149);\r\n  }\r\n  .switch-input:checked + .switch-label::after {\r\n    left: 27px;\r\n    top: 3px;\r\n  }\r\n\r\n  .mono::before {\r\n    border: 2px solid white;\r\n    background: none !important;\r\n  }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}